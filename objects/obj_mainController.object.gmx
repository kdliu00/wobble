<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_splash</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///initialize iaps
var map_create = true;
if file_exists("iap_data.json") {
   global.purchaseMap = ds_map_secure_load("iap_data.json");
   if ds_exists(global.purchaseMap, ds_type_map) {
      if os_type = os_macosx {
          var product1 = "com.tangentgamestudios.mac.smallcoins";
          var product2 = "com.tangentgamestudios.mac.mediumcoins";
          var product3 = "com.tangentgamestudios.mac.largecoins";
          var product4 = "com.tangentgamestudios.mac.woblnoads";
      } else { 
          var product1 = "com.tangentgamestudios.smallcoins";
          var product2 = "com.tangentgamestudios.mediumcoins";
          var product3 = "com.tangentgamestudios.largecoins";
          var product4 = "com.tangentgamestudios.woblnoads";
      }
      if ds_map_exists(global.purchaseMap, product1) &amp;&amp; ds_map_exists(global.purchaseMap, product2) &amp;&amp; ds_map_exists(global.purchaseMap, product3) &amp;&amp; ds_map_exists(global.purchaseMap, product4) {
         map_create=false;
      }  
   }
}

if map_create {
   global.purchaseMap = ds_map_create();
   if os_type = os_macosx {
       var product1 = "com.tangentgamestudios.mac.smallcoins";
       var product2 = "com.tangentgamestudios.mac.mediumcoins";
       var product3 = "com.tangentgamestudios.mac.largecoins";
       var product4 = "com.tangentgamestudios.mac.woblnoads";
   } else {
       var product1 = "com.tangentgamestudios.smallcoins";
       var product2 = "com.tangentgamestudios.mediumcoins";
       var product3 = "com.tangentgamestudios.largecoins";
       var product4 = "com.tangentgamestudios.woblnoads";
   }
   ds_map_add(global.purchaseMap, product1,0);
   ds_map_add(global.purchaseMap, product2,0);
   ds_map_add(global.purchaseMap, product3,0);
   ds_map_add(global.purchaseMap, product4,0);
   ds_map_secure_save(global.purchaseMap, "iap_data.json");
}

var psmallcoins = ds_map_create();
var pmediumcoins = ds_map_create();
var plargecoins = ds_map_create();
var pwoblnoads = ds_map_create();

var productList = ds_list_create();
if os_type = os_macosx {
    ds_map_add(psmallcoins, "id", "com.tangentgamestudios.mac.smallcoins");
    ds_map_add(pmediumcoins, "id", "com.tangentgamestudios.mac.mediumcoins");
    ds_map_add(plargecoins, "id", "com.tangentgamestudios.mac.largecoins");
    ds_map_add(pwoblnoads, "id", "com.tangentgamestudios.mac.woblnoads");
} else { 
    ds_map_add(psmallcoins, "id", "com.tangentgamestudios.smallcoins");
    ds_map_add(pmediumcoins, "id", "com.tangentgamestudios.mediumcoins");
    ds_map_add(plargecoins, "id", "com.tangentgamestudios.largecoins");
    ds_map_add(pwoblnoads, "id", "com.tangentgamestudios.woblnoads");
}

ds_map_add(psmallcoins, "title", "Small Coins");
ds_map_add(pmediumcoins, "title", "Medium Coins");
ds_map_add(plargecoins, "title", "Large Coins");
ds_map_add(pwoblnoads, "title", "Wobl No Ads");

ds_map_add(psmallcoins, "type", "Consumable");
ds_map_add(pmediumcoins, "type", "Consumable");
ds_map_add(plargecoins, "type", "Consumable");
ds_map_add(pwoblnoads, "type", "Nonconsumable");

ds_list_add(productList, psmallcoins);
ds_list_add(productList, pmediumcoins);
ds_list_add(productList, plargecoins);
ds_list_add(productList, pwoblnoads);

iap_activate(productList);
ds_map_destroy(psmallcoins);
ds_map_destroy(pmediumcoins);
ds_map_destroy(plargecoins);
ds_map_destroy(pwoblnoads);
ds_list_destroy(productList);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///initialize variables

show_debug_overlay(false);
if os_type = os_windows {
    winX = window_get_width();
    winY = window_get_height();
}
display_reset(0, true);
if os_type = os_windows {
    window_set_size(winX, winY);
}

global.reset = false;

if file_exists("save.sav") {
    file_delete("save.sav");
}

if date_get_timezone() != timezone_utc {
   date_set_timezone(timezone_utc);
}

achievement_login();

global.spinToWin = false;

image_alpha = 1;
splash = true;

delay = 10;

global.firstTime = true;
global.shopSwiped = false;
global.settingsSwiped = false;

global.ballNumber = 44;
global.premBallNumber = 10;
global.ballType = spr_ball1;
global.menuBallType = global.ballType;

//shop scroll
global.shopScroll = 0;
global.shopAcc = 0.8;

device_mouse_dbclick_enable(false);
global.points = 0;
global.highscore = 0;
global.coins = 0;
global.coinAdd = 0;
global.plays = 5;

global.redCoins = 0;

global.swipeSpeed = 0;

global.level = 0;
global.xpNeeded = (global.level * 5) + 50;
global.xpGot = 0;

global.noads = true;

global.dailyReward = true;
global.year = 0;
global.month = 0;
global.day = 0;

scr_balls();

scr_premBalls();

scr_load();

if global.dailyReward = false {
    if global.year &lt; date_get_year(date_current_datetime()) {
        global.dailyReward = true;
    } else if global.month &lt; date_get_month(date_current_datetime()) {
        global.dailyReward = true;
    } else if global.day &lt; date_get_day(date_current_datetime()) {
        global.dailyReward = true;
    } else {
        global.dailyReward = false;
    }
}

timer = 1.5 * room_speed;

global.offsetX = 0;
global.offsetY = 0;

newSet = false;

oX = x;
oY = y;
shop = false;

global.acc = 4;
swipeTime = 0;
swipeTimeY = 0;

adMoved = false;

//ads
if global.noads = false {
    GoogleMobileAds_Init("ca-app-pub-1590690452411246/3580021012");//banner
    //GoogleMobileAds_Init("ca-app-pub-1590690452411246/4809735410");//death interstitial
    
    //AdColony_Init("appa290455e39e444d6bf", "vzc42677428e50481bae", "v4vcfe5d58d196404cb2a9"); //reward video
    
    bannerAdded = false;
    global.coinsVideo = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>splash = -0.03;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if room = rm_boot {
    visible = true;
    image_alpha += splash;
    if image_alpha &gt;= 1 &amp;&amp; splash!= 0 {
        splash = 0;
        alarm[0] = 4 * room_speed;
    } else if image_alpha &lt;= 0 {
        room_goto(rm_title);
    }
} else {
    sprite_index = spr_blank;
    if global.noads = false {
        if bannerAdded = false {
            GoogleMobileAds_AddBannerAt("ca-app-pub-1590690452411246/3580021012", GoogleMobileAds_Full_Banner, -1, -1);
            bannerAdded = true;
        }
    }
}

if room = rm_main {
    if instance_exists(obj_restart) {
        if image_alpha &gt; 0 {
            image_alpha -= 0.08;
        } else {
            image_alpha = 0;
        }
    } else {
        if image_alpha &lt; 1 &amp;&amp; global.points &gt;= 1 {
            image_alpha += 0.05;
        }
    }
    if timer &gt; 0 {
        timer -= 1;
    } else if timer = 0 {
        instance_create(0, -2668, obj_rubble);
        instance_create(0, -10572, obj_background);
        instance_create(0, -21244, obj_background);
        timer = -1;
    }
    if !instance_exists(obj_restart) {
        if global.points &lt;= 20 {
            global.ballSpeed = 6;
        } else {
            global.ballSpeed = (6 + (0.08 * (global.points - 20)));
        }
    }

    if global.points &gt; global.highscore {
        global.highscore = global.points;
    }
}
if room = rm_title {
    if global.shopSwiped = true &amp;&amp; global.settingsSwiped = true {
        global.firstTime = false;
    }
    if obj_spinToWin.oX = 375 {
        shop = true;
    } else {
        shop = false;
    }
    if global.shopScroll != 0 {
        if abs(global.shopScroll) &lt;= global.shopAcc {
            global.shopScroll = 0;
        } else {
            global.shopScroll += -sign(global.shopScroll) * global.shopAcc;
        }
    }
    if delay &gt; 0 {
        delay -= 1;
        global.coinAdd = 0;
    } else {
        if device_mouse_check_button_pressed(0, mb_left) {
            scr_save();
            oX = device_mouse_x(0);
            oY = device_mouse_y(0);
            global.swipe = false;
            global.swipeSpeed = 0;
            if global.spinToWin = false {
                global.shopScroll = 0;
            }
            
            newSet = false;
        }
        if device_mouse_check_button(0, mb_left) {
            if shop = true {
                if oY &gt; 902 or oY &lt; 350 {
                    global.offsetX = oX - device_mouse_x(0);
                    swipeTime += 1;
                } else if global.spinToWin = false {
                    global.offsetY = device_mouse_y(0) - oY;
                    swipeTimeY += 1;
                }
            } else {
                global.offsetX = oX - device_mouse_x(0);
                swipeTime += 1;
            }
            if (abs(oX - device_mouse_x(0))) &gt; (abs(device_mouse_y(0) - oY)) {
                if newSet = false {
                    newSet = true;
                    oX = device_mouse_x(0);
                }
                global.offsetX = oX - device_mouse_x(0);
                swipeTime += 1;
                global.offsetY = 0;
            }
        }
        if device_mouse_check_button_released(0, mb_left) {
            global.swipeSpeed = global.offsetX / swipeTime;
            if global.spinToWin = false {
                global.shopScroll = global.offsetY / swipeTimeY;
            }
            global.offsetX = 0;
            global.returning = true;
            swipeTime = 0;
            swipeTimeY = 0;
            
            //shop
            global.offsetY = 0;
        }
    }
} else {
    delay = 10;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="71">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var type = ds_map_find_value(async_load, "type");
var status = ds_map_find_value(async_load, "status");
if status = 0 {
   //error of some kind
   var error = ds_map_find_value(async_load, "error");
} else {
   if type = "register" {
      global.reg_id = ds_map_find_value(async_load, "reg_id");
   } else {
      var data = ds_map_find_value(async_load, "data");
   }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="70">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///ads
var ident = ds_map_find_value(async_load, "type" );
var loaded = ds_map_find_value(async_load, "loaded");
if ident = "banner_load" {
    if loaded = true &amp;&amp; adMoved = false {
        var bh = ds_map_find_value(async_load, "height");
        var py = display_get_height() - bh;
        GoogleMobileAds_MoveBanner(0, py);
        adMoved = true;
    } else {
        adMoved = false
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="66">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///iap event
var val = ds_map_find_value(iap_data,"type");
switch (val) {
    case iap_ev_purchase:
        var map = ds_map_create();
        var purchase_id = ds_map_find_value(iap_data, "index");
        iap_purchase_details(purchase_id, map);
        if ds_map_find_value(map, "status") = iap_purchased {
        var product_id = ds_map_find_value(map, "product");
        ds_map_replace(global.purchaseMap, product_id, 1);
        switch (product_id) {
            case "com.tangentgamestudios.smallcoins":
            case "com.tangentgamestudios.mac.smallcoins":
                iap_consume(product_id);
            break;
            
            case "com.tangentgamestudios.mediumcoins":
            case "com.tangentgamestudios.mac.mediumcoins":
                iap_consume(product_id);
            break;
            
            case "com.tangentgamestudios.largecoins":
            case "com.tangentgamestudios.mac.largecoins":
                iap_consume(product_id);
            break;
            
            case "com.tangentgamestudios.woblnoads":
            case "com.tangentgamestudios.mac.woblnoads":
                global.noads = true;
                GoogleMobileAds_RemoveBanner();
                scr_save();
            break;
            }
        }
        ds_map_destroy(map);
    break;
    case iap_ev_consume:
        var product_id = ds_map_find_value(iap_data,"product");
        if ds_map_find_value(iap_data, "consumed") {
            ds_map_replace(global.purchaseMap, product_id, 0);
            switch (product_id) {
                case "com.tangentgamestudios.smallcoins":
                case "com.tangentgamestudios.mac.smallcoins":
                    global.coins += 300;
                break;
                
                case "com.tangentgamestudios.mediumcoins":
                case "com.tangentgamestudios.mac.mediumcoins":
                    global.coins += 800;
                break;
                
                case "com.tangentgamestudios.largecoins":
                case "com.tangentgamestudios.mac.largecoins":
                    global.coins += 1400;
                break;
            }
        }
    break;
    case iap_ev_restore:
        var result = ds_map_find_value(iap_data, "result");
        if result = true {
            show_message("Purchases successfully restored!");
        } else {
            show_message("Sorry, unable to restore purchases!");
        }
    break;
}
scr_save();
ds_map_secure_save(global.purchaseMap, "iap_data.json");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_alpha = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scr_save();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();

draw_set_color(c_black);
draw_set_font(ft_points);
draw_set_halign(fa_center);

if room = rm_main {
    draw_set_alpha(image_alpha);
    draw_text(room_width / 2, 128, global.points);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="82">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///RESET SAVE FILE
if os_type = os_windows {
    global.reset = true;
    if file_exists("wobl.sav") {
        file_delete("wobl.sav");
    }
    game_restart();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
